// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Rcppzhuoer.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// test_paste
CharacterVector test_paste();
RcppExport SEXP _Rcppzhuoer_test_paste() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_paste());
    return rcpp_result_gen;
END_RCPP
}
// as_tibble
List as_tibble(List l);
static SEXP _Rcppzhuoer_as_tibble_try(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(as_tibble(l));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rcppzhuoer_as_tibble(SEXP lSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rcppzhuoer_as_tibble_try(lSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _Rcppzhuoer_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*as_tibble)(List)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _Rcppzhuoer_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Rcppzhuoer", "_Rcppzhuoer_as_tibble", (DL_FUNC)_Rcppzhuoer_as_tibble_try);
    R_RegisterCCallable("Rcppzhuoer", "_Rcppzhuoer_RcppExport_validate", (DL_FUNC)_Rcppzhuoer_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rcppzhuoer_test_paste", (DL_FUNC) &_Rcppzhuoer_test_paste, 0},
    {"_Rcppzhuoer_as_tibble", (DL_FUNC) &_Rcppzhuoer_as_tibble, 1},
    {"_Rcppzhuoer_RcppExport_registerCCallable", (DL_FUNC) &_Rcppzhuoer_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rcppzhuoer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
